الاستثناء  البرمجة بيحصل لما يحصل حاجة مش متوقعة أو غير طبيعية وقت تنفيذ البرنامج. مثلاً، لو حاولت تقسم على صفر أو لو فتحت ملف مش موجود، ده هيسبب مشكلة في البرنام
ازاي نحل مشاكله 
في 4 كلمات رءيسيه 
1. try:
دي الكلمة اللي بنحط فيها الكود اللي إحنا متوقعين إنه ممكن يسبب خطأ.

مثال: لو عندك عملية قسمة، ممكن يكون في خطأ لو حاولت تقسيم عدد على صفر.

2. catch:
دي الكلمة اللي بنستخدمها علشان نتعامل مع الاستثناء لو حصل. يعني لو حصل خطأ في الكود اللي جوه الـ try، هيروح الكود للـ catch عشان يعالج الخطأ.

مثال: لو حصل قسمة على صفر، هنقدر نطبع رسالة للـ catch بتقول "مفيش قسمة على صفر".

3. finally:
الـ finally ده مكان الكود اللي عايزينه ينفذ في كل الحالات، سواء حصل خطأ أو لأ. يعني لو الكود اشتغل تمام أو حصل فيه خطأ، الكود في finally هينفذ.

مثال: ممكن يكون عندك شوية كود عايز تنفذه في الآخر عشان تسكر موارد (زي ملفات أو قواعد بيانات) سواء كان فيه خطأ أو لأ.

4. throw:
الكلمة دي بنستخدمها لو عايزين نرفع (نطرد) خطأ معين، يعني نسبب استثناء عشان نوقف تنفيذ البرنامج أو علشان نعمل شيء معين.

 مثال تفصيلي بالبلدي:
try
{
    // نحاول ننفذ الكود ده
    int result = 10 / 0;  // دي هتسبب خطأ لأنه مفيش قسمة على صفر
}
catch (DivideByZeroException ex)
{
    // لو حصل خطأ في القسمة، الكود ده هينفذ
    Console.WriteLine("مفيش قسمة على صفر يا معلم.");
}
finally
{
    // الكود ده هينفذ في كل الأحوال
    Console.WriteLine("خلصنا تنفيذ الكود.");
}
شرح الكود:
try: هنا بنكتب الكود اللي ممكن يسبب خطأ (هنا حاولنا نقسم على صفر).
catch: لو حصل الخطأ (في المثال ده قسمة على صفر)، الكود هيطبع "مفيش قسمة على صفر يا معلم".
finally: في الآخر، حتى لو حصل خطأ أو مفيش، الكود ده هيتنفذ في كل الحالات عشان يطبع "خلصنا تنفيذ الكود".
